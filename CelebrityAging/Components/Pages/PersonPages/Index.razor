@page "/people"

@implements IAsyncDisposable
@inject IDbContextFactory<Persistance.ApplicationDbContext> DbFactory

@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="people/create">Create New</a>
</p>
<p>
   
    <label for="search"> Search: </label>
    <input type="search" @bind="@PersonName" @bind:event="oninput" placeholder="Search" />

</p>

<QuickGrid Class="table" Items="filtered" Pagination="pagination">
    <PropertyColumn Property="person => person.Name" Sortable="true" />
    <PropertyColumn Property="person => person.BirthDate"  />
    <!-- Creates errorr with search
    <PropertyColumn Property="person => context.Country.FirstOrDefault(c => c.Id == person.CountryId).Name"  title="Country"/>
    -->
  
    <TemplateColumn Context="person">
        <a href="@($"people/edit?id={person.Id}")">Edit</a> |
        <a href="@($"people/details?id={person.Id}")">Details</a> |
        <a href="@($"people/delete?id={person.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="pagination" />

@code {

    private string PersonName {get; set;}
    private ApplicationDbContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    private IQueryable<Person> filtered => context.Person.Where( p => p.Name.Contains(PersonName));


    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    PaginationState pagination = new PaginationState { ItemsPerPage = 10} ;
}
